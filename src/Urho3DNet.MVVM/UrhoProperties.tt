<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)Urho3DNet.dll" #>
<#@ assembly name="NetStandard" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Urho3DNet" #>
<#@ output extension=".cs" #>
using Urho3DNet.MVVM.Binding;

namespace Urho3DNet.MVVM
{
<#
Func<Type, string> GetTypeName = (propertyType)=>{
    var propertyTypeName = propertyType.Name;
    if (propertyType == typeof(float))
        propertyTypeName = "float";
    else if (propertyType == typeof(bool))
        propertyTypeName = "bool";
    else if (propertyType == typeof(string))
        propertyTypeName = "string";
    else if (propertyType == typeof(int))
        propertyTypeName = "int";
    else if (propertyType == typeof(uint))
        propertyTypeName = "uint";
    return propertyTypeName;
};
Action<string, string, Tuple<string,Type>[]> PrintPropertiesForClass = (name, baseName, properties) => { #>
    public partial class <#=name#>View : <#=baseName#>View
    {
        private <#=name#> _target;

        public <#=name#>View(<#=name#> target): base(target)
        {
            _target = target;
<# foreach (var property in properties) {
    var propertyName = property.Item1;
    var propertyType = property.Item2;
    var propertyTypeName = GetTypeName(propertyType);
#>
            _lastKnown<#=propertyName#> = target.<#=propertyName#>;
<# } #>
        }

        public new <#=name#> Target => _target;

<# foreach (var property in properties) {
    var propertyName = property.Item1;
    var propertyType = property.Item2;
    var propertyTypeName = GetTypeName(propertyType);
#>
        #region Property <#=propertyName#>

        private <#=propertyTypeName#> _lastKnown<#=propertyName#>;

        public static readonly DirectProperty<<#=name#>View, <#=propertyTypeName#>> <#=propertyName#>Property =
            UrhoProperty.RegisterDirect<<#=name#>View, <#=propertyTypeName#>>(
                nameof(<#=propertyName#>),
                o => o.<#=propertyName#>,
                (o, v) => o.<#=propertyName#> = v);

        public <#=propertyTypeName#> <#=propertyName#>
        {
            get => _target.<#=propertyName#>;

            set
            {
                SetAndRaise(<#=propertyName#>Property, _lastKnown<#=propertyName#>, value, _ =>
                {
                    _lastKnown<#=propertyName#> = value;
                    _target.<#=propertyName#> = value;
                });
            }
        }

        #endregion Property <#=propertyName#>
<# } #>
    }
<# };


PrintPropertiesForClass("UIElement", "Animatable", new Tuple<string,Type>[]{
    Tuple.Create("Name", typeof(string)),
    Tuple.Create("Position", typeof(IntVector2)),
    Tuple.Create("Size", typeof(IntVector2)),
    Tuple.Create("Width", typeof(int)),
    Tuple.Create("Height", typeof(int)),
    Tuple.Create("MinSize", typeof(IntVector2)),
    Tuple.Create("MinWidth", typeof(int)),
    Tuple.Create("MinHeight", typeof(int)),
    Tuple.Create("MaxSize", typeof(IntVector2)),
    Tuple.Create("MaxWidth", typeof(int)),
    Tuple.Create("MaxHeight", typeof(int)),
    Tuple.Create("ChildOffset", typeof(IntVector2)),
    Tuple.Create("HorizontalAlignment", typeof(HorizontalAlignment)),
    Tuple.Create("VerticalAlignment", typeof(VerticalAlignment)),
    Tuple.Create("EnableAnchor", typeof(bool)),
    Tuple.Create("MinAnchor", typeof(Vector2)),
    Tuple.Create("MaxAnchor", typeof(Vector2)),
    Tuple.Create("MinOffset", typeof(IntVector2)),
    Tuple.Create("MaxOffset", typeof(IntVector2)),
    Tuple.Create("Pivot", typeof(Vector2)),
    Tuple.Create("ClipBorder", typeof(IntRect)),
    Tuple.Create("Priority", typeof(int)),
    Tuple.Create("Opacity", typeof(float)),
    Tuple.Create("BringToBack", typeof(bool)),
    Tuple.Create("ClipChildren", typeof(bool)),
    Tuple.Create("UseDerivedOpacity", typeof(bool)),
    Tuple.Create("IsEnabled", typeof(bool)),
    Tuple.Create("IsEditable", typeof(bool)),
    Tuple.Create("IsSelected", typeof(bool)),
    Tuple.Create("IsVisible", typeof(bool)),
    Tuple.Create("IsHovering", typeof(bool)),
    Tuple.Create("IsInternal", typeof(bool)),
    Tuple.Create("FocusMode", typeof(FocusMode)),
    Tuple.Create("DragDropMode", typeof(DragAndDropMode)),
    Tuple.Create("LayoutMode", typeof(LayoutMode)),
    Tuple.Create("LayoutSpacing", typeof(int)),
    Tuple.Create("LayoutBorder", typeof(IntRect)),
    Tuple.Create("LayoutFlexScale", typeof(Vector2)),
//    Tuple.Create("Tags", typeof(StringList)),
    Tuple.Create("Indent", typeof(int)),
    Tuple.Create("IndentSpacing", typeof(int)),
    Tuple.Create("TraversalMode", typeof(TraversalMode)),
    Tuple.Create("IsElementEventSender", typeof(bool)),
});
PrintPropertiesForClass("Animatable", "Serializable", new Tuple<string,Type>[]{
    Tuple.Create("AnimationEnabled", typeof(bool)),
//    Tuple.Create("ObjectAnimation", typeof(ObjectAnimation)),
//    Tuple.Create("ObjectAnimationAttr", typeof(ResourceRef)),
});
PrintPropertiesForClass("Serializable", "Object", new Tuple<string,Type>[]{
    Tuple.Create("IsTemporary", typeof(bool)),
});
PrintPropertiesForClass("BorderImage", "UIElement", new Tuple<string,Type>[]{
//    Tuple.Create("Texture", typeof(Texture)),
    Tuple.Create("ImageRect", typeof(IntRect)),
    Tuple.Create("Border", typeof(IntRect)),
    Tuple.Create("ImageBorder", typeof(IntRect)),
    Tuple.Create("HoverOffset", typeof(IntVector2)),
    Tuple.Create("DisabledOffset", typeof(IntVector2)),
    Tuple.Create("BlendMode", typeof(BlendMode)),
    Tuple.Create("IsTiled", typeof(bool)),
    Tuple.Create("Material", typeof(Material)),
//    Tuple.Create("TextureAttr", typeof(ResourceRef)),
//    Tuple.Create("MaterialAttr", typeof(ResourceRef)),
});
PrintPropertiesForClass("Button", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("PressedOffset", typeof(IntVector2)),
    Tuple.Create("PressedChildOffset", typeof(IntVector2)),
    Tuple.Create("RepeatDelay", typeof(float)),
    Tuple.Create("RepeatRate", typeof(float)),
});
PrintPropertiesForClass("CheckBox", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("IsChecked", typeof(bool)),
    Tuple.Create("CheckedOffset", typeof(IntVector2)),
});
PrintPropertiesForClass("Cursor", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("Shape", typeof(string)),
    Tuple.Create("UseSystemShapes", typeof(bool)),
//    Tuple.Create("ShapesAttr", typeof(VariantList)),
});
PrintPropertiesForClass("DropDownList", "Menu", new Tuple<string,Type>[]{
    Tuple.Create("Selection", typeof(uint)),
    Tuple.Create("PlaceholderText", typeof(string)),
    Tuple.Create("ResizePopup", typeof(bool)),
});
PrintPropertiesForClass("Menu", "Button", new Tuple<string,Type>[]{
//    Tuple.Create("Popup", typeof(UIElement)),
    Tuple.Create("PopupOffset", typeof(IntVector2)),
});
PrintPropertiesForClass("LineEdit", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("Text", typeof(string)),
    Tuple.Create("CursorPosition", typeof(uint)),
    Tuple.Create("CursorBlinkRate", typeof(float)),
    Tuple.Create("MaxLength", typeof(uint)),
    Tuple.Create("EchoCharacter", typeof(uint)),
    Tuple.Create("IsCursorMovable", typeof(bool)),
    Tuple.Create("IsTextSelectable", typeof(bool)),
    Tuple.Create("IsTextCopyable", typeof(bool)),
});
PrintPropertiesForClass("ListView", "ScrollView", new Tuple<string,Type>[]{
    Tuple.Create("Selection", typeof(uint)),
//    Tuple.Create("Selections", typeof(UIntArray)),
//    Tuple.Create("HighlightMode", typeof(HighlightMode)),
    Tuple.Create("Multiselect", typeof(bool)),
    Tuple.Create("ClearSelectionOnDefocus", typeof(bool)),
    Tuple.Create("SelectOnClickEnd", typeof(bool)),
    Tuple.Create("HierarchyMode", typeof(bool)),
    Tuple.Create("BaseIndent", typeof(int)),
});
PrintPropertiesForClass("ScrollView", "UIElement", new Tuple<string,Type>[]{
    Tuple.Create("ViewPosition", typeof(IntVector2)),
//    Tuple.Create("ContentElement", typeof(UIElement)),
    Tuple.Create("ScrollBarsAutoVisible", typeof(bool)),
    Tuple.Create("HorizontalScrollBarVisible", typeof(bool)),
    Tuple.Create("VerticalScrollBarVisible", typeof(bool)),
    Tuple.Create("ScrollStep", typeof(float)),
    Tuple.Create("PageStep", typeof(float)),
    Tuple.Create("ScrollDeceleration", typeof(float)),
    Tuple.Create("ScrollSnapEpsilon", typeof(float)),
    Tuple.Create("AutoDisableChildren", typeof(bool)),
    Tuple.Create("AutoDisableThreshold", typeof(float)),
});
PrintPropertiesForClass("ProgressBar", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("Orientation", typeof(Orientation)),
    Tuple.Create("Range", typeof(float)),
    Tuple.Create("Value", typeof(float)),
    Tuple.Create("LoadingPercentStyle", typeof(string)),
    Tuple.Create("ShowPercentText", typeof(bool)),
});
PrintPropertiesForClass("ScrollBar", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("Orientation", typeof(Orientation)),
    Tuple.Create("Range", typeof(float)),
    Tuple.Create("Value", typeof(float)),
    Tuple.Create("ScrollStep", typeof(float)),
    Tuple.Create("StepFactor", typeof(float)),
});
PrintPropertiesForClass("Slider", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("Orientation", typeof(Orientation)),
    Tuple.Create("Range", typeof(float)),
    Tuple.Create("Value", typeof(float)),
    Tuple.Create("RepeatRate", typeof(float)),
});
PrintPropertiesForClass("Sprite", "UIElement", new Tuple<string,Type>[]{
    Tuple.Create("Position", typeof(Vector2)),
    Tuple.Create("HotSpot", typeof(IntVector2)),
    Tuple.Create("Scale", typeof(Vector2)),
    Tuple.Create("Rotation", typeof(float)),
//    Tuple.Create("Texture", typeof(Texture)),
    Tuple.Create("ImageRect", typeof(IntRect)),
    Tuple.Create("BlendMode", typeof(BlendMode)),
//    Tuple.Create("TextureAttr", typeof(ResourceRef)),
});
PrintPropertiesForClass("Text", "UISelectable", new Tuple<string,Type>[]{
    Tuple.Create("FontSize", typeof(float)),
    Tuple.Create("TextAlignment", typeof(HorizontalAlignment)),
    Tuple.Create("RowSpacing", typeof(float)),
    Tuple.Create("Wordwrap", typeof(bool)),
    Tuple.Create("AutoLocalizable", typeof(bool)),
//    Tuple.Create("TextEffect", typeof(TextEffect)),
    Tuple.Create("EffectShadowOffset", typeof(IntVector2)),
    Tuple.Create("EffectStrokeThickness", typeof(int)),
    Tuple.Create("EffectRoundStroke", typeof(bool)),
    Tuple.Create("EffectColor", typeof(Color)),
    Tuple.Create("EffectDepthBias", typeof(float)),
//    Tuple.Create("FontAttr", typeof(ResourceRef)),
    Tuple.Create("TextAttr", typeof(string)),
});
PrintPropertiesForClass("UISelectable", "UIElement", new Tuple<string,Type>[]{
    Tuple.Create("SelectionColor", typeof(Color)),
    Tuple.Create("HoverColor", typeof(Color)),
});
PrintPropertiesForClass("ToolTip", "UIElement", new Tuple<string,Type>[]{
    Tuple.Create("Delay", typeof(float)),
});
PrintPropertiesForClass("View3D", "Window", new Tuple<string,Type>[]{
    Tuple.Create("Format", typeof(uint)),
    Tuple.Create("AutoUpdate", typeof(bool)),
});
PrintPropertiesForClass("Window", "BorderImage", new Tuple<string,Type>[]{
    Tuple.Create("IsMovable", typeof(bool)),
    Tuple.Create("IsResizable", typeof(bool)),
    Tuple.Create("FixedWidthResizing", typeof(bool)),
    Tuple.Create("FixedHeightResizing", typeof(bool)),
    Tuple.Create("ResizeBorder", typeof(IntRect)),
    Tuple.Create("IsModal", typeof(bool)),
    Tuple.Create("ModalShadeColor", typeof(Color)),
    Tuple.Create("ModalFrameColor", typeof(Color)),
    Tuple.Create("ModalFrameSize", typeof(IntVector2)),
    Tuple.Create("ModalAutoDismiss", typeof(bool)),
});


#>
}